diff --git a/components/freertos/app_startup.c b/components/freertos/app_startup.c
index 99ea6ae..fa79b3d 100644
--- a/components/freertos/app_startup.c
+++ b/components/freertos/app_startup.c
@@ -57,7 +57,7 @@ CONFIG_FREERTOS_UNICORE and CONFIG_ESP_SYSTEM_SINGLE_CORE_MODE should be identic
 // -------------------- Declarations -----------------------
 
 static void main_task(void* args);
-static const char* APP_START_TAG = "app_start";
+// static const char* APP_START_TAG = "app_start";
 
 // ------------------ CPU0 App Startup ---------------------
 
@@ -80,24 +80,25 @@ void esp_startup_start_app(void)
     esp_gdbstub_init();
 #endif // CONFIG_ESP_SYSTEM_GDBSTUB_RUNTIME
 
-    BaseType_t res = xTaskCreatePinnedToCore(main_task, "main",
-                                             ESP_TASK_MAIN_STACK, NULL,
-                                             ESP_TASK_MAIN_PRIO, NULL, ESP_TASK_MAIN_CORE);
-    assert(res == pdTRUE);
-    (void)res;
-
-    /*
-    If a particular FreeRTOS port has port/arch specific OS startup behavior, they can implement a function of type
-    "void port_start_app_hook(void)" in their `port.c` files. This function will be called below, thus allowing each
-    FreeRTOS port to implement port specific app startup behavior.
-    */
-    void __attribute__((weak)) port_start_app_hook(void);
-    if (port_start_app_hook != NULL) {
-        port_start_app_hook();
-    }
-
-    ESP_EARLY_LOGI(APP_START_TAG, "Starting scheduler on CPU0");
-    vTaskStartScheduler();
+    // BaseType_t res = xTaskCreatePinnedToCore(main_task, "main",
+    //                                          ESP_TASK_MAIN_STACK, NULL,
+    //                                          ESP_TASK_MAIN_PRIO, NULL, ESP_TASK_MAIN_CORE);
+    // assert(res == pdTRUE);
+    // (void)res;
+
+    // /*
+    // If a particular FreeRTOS port has port/arch specific OS startup behavior, they can implement a function of type
+    // "void port_start_app_hook(void)" in their `port.c` files. This function will be called below, thus allowing each
+    // FreeRTOS port to implement port specific app startup behavior.
+    // */
+    // void __attribute__((weak)) port_start_app_hook(void);
+    // if (port_start_app_hook != NULL) {
+    //     port_start_app_hook();
+    // }
+
+    // ESP_EARLY_LOGI(APP_START_TAG, "Starting scheduler on CPU0");
+    // vTaskStartScheduler();
+    main_task(NULL);
 }
 
 // --------------- CPU[1:N-1] App Startup ------------------
@@ -206,6 +207,6 @@ static void main_task(void* args)
     ESP_LOGI(MAIN_TAG, "Calling app_main()");
     extern void app_main(void);
     app_main();
-    ESP_LOGI(MAIN_TAG, "Returned from app_main()");
-    vTaskDelete(NULL);
+    // ESP_LOGI(MAIN_TAG, "Returned from app_main()");
+    // vTaskDelete(NULL);
 }
diff --git a/components/hal/include/hal/gpio_types.h b/components/hal/include/hal/gpio_types.h
index c85f40d..0eaeb7b 100644
--- a/components/hal/include/hal/gpio_types.h
+++ b/components/hal/include/hal/gpio_types.h
@@ -19,6 +19,62 @@ typedef enum {
     GPIO_PORT_MAX,
 } gpio_port_t;
 
+#define GPIO_SEL_0              (BIT(0))                         /*!< Pin 0 selected */
+#define GPIO_SEL_1              (BIT(1))                         /*!< Pin 1 selected */
+#define GPIO_SEL_2              (BIT(2))                         /*!< Pin 2 selected */
+#define GPIO_SEL_3              (BIT(3))                         /*!< Pin 3 selected */
+#define GPIO_SEL_4              (BIT(4))                         /*!< Pin 4 selected */
+#define GPIO_SEL_5              (BIT(5))                         /*!< Pin 5 selected */
+#define GPIO_SEL_6              (BIT(6))                         /*!< Pin 6 selected */
+#define GPIO_SEL_7              (BIT(7))                         /*!< Pin 7 selected */
+#define GPIO_SEL_8              (BIT(8))                         /*!< Pin 8 selected */
+#define GPIO_SEL_9              (BIT(9))                         /*!< Pin 9 selected */
+#define GPIO_SEL_10             (BIT(10))                        /*!< Pin 10 selected */
+#define GPIO_SEL_11             (BIT(11))                        /*!< Pin 11 selected */
+#define GPIO_SEL_12             (BIT(12))                        /*!< Pin 12 selected */
+#define GPIO_SEL_13             (BIT(13))                        /*!< Pin 13 selected */
+#define GPIO_SEL_14             (BIT(14))                        /*!< Pin 14 selected */
+#define GPIO_SEL_15             (BIT(15))                        /*!< Pin 15 selected */
+#define GPIO_SEL_16             (BIT(16))                        /*!< Pin 16 selected */
+#define GPIO_SEL_17             (BIT(17))                        /*!< Pin 17 selected */
+#define GPIO_SEL_18             (BIT(18))                        /*!< Pin 18 selected */
+#define GPIO_SEL_19             (BIT(19))                        /*!< Pin 19 selected */
+#define GPIO_SEL_20             (BIT(20))                        /*!< Pin 20 selected */
+#define GPIO_SEL_21             (BIT(21))                        /*!< Pin 21 selected */
+#if CONFIG_IDF_TARGET_ESP32
+#define GPIO_SEL_22             (BIT(22))                        /*!< Pin 22 selected */
+#define GPIO_SEL_23             (BIT(23))                        /*!< Pin 23 selected */
+
+#define GPIO_SEL_25             (BIT(25))                        /*!< Pin 25 selected */
+#endif
+#define GPIO_SEL_26             (BIT(26))                        /*!< Pin 26 selected */
+#define GPIO_SEL_27             (BIT(27))                        /*!< Pin 27 selected */
+#define GPIO_SEL_28             (BIT(28))                        /*!< Pin 28 selected */
+#define GPIO_SEL_29             (BIT(29))                        /*!< Pin 29 selected */
+#define GPIO_SEL_30             (BIT(30))                        /*!< Pin 30 selected */
+#define GPIO_SEL_31             (BIT(31))                        /*!< Pin 31 selected */
+#define GPIO_SEL_32             ((uint64_t)(((uint64_t)1)<<32))  /*!< Pin 32 selected */
+#define GPIO_SEL_33             ((uint64_t)(((uint64_t)1)<<33))  /*!< Pin 33 selected */
+#define GPIO_SEL_34             ((uint64_t)(((uint64_t)1)<<34))  /*!< Pin 34 selected */
+#define GPIO_SEL_35             ((uint64_t)(((uint64_t)1)<<35))  /*!< Pin 35 selected */
+#define GPIO_SEL_36             ((uint64_t)(((uint64_t)1)<<36))  /*!< Pin 36 selected */
+#define GPIO_SEL_37             ((uint64_t)(((uint64_t)1)<<37))  /*!< Pin 37 selected */
+#define GPIO_SEL_38             ((uint64_t)(((uint64_t)1)<<38))  /*!< Pin 38 selected */
+#define GPIO_SEL_39             ((uint64_t)(((uint64_t)1)<<39))  /*!< Pin 39 selected */
+#if SOC_GPIO_PIN_COUNT > 40
+#define GPIO_SEL_40             ((uint64_t)(((uint64_t)1)<<40))  /*!< Pin 40 selected */
+#define GPIO_SEL_41             ((uint64_t)(((uint64_t)1)<<41))  /*!< Pin 41 selected */
+#define GPIO_SEL_42             ((uint64_t)(((uint64_t)1)<<42))  /*!< Pin 42 selected */
+#define GPIO_SEL_43             ((uint64_t)(((uint64_t)1)<<43))  /*!< Pin 43 selected */
+#define GPIO_SEL_44             ((uint64_t)(((uint64_t)1)<<44))  /*!< Pin 44 selected */
+#define GPIO_SEL_45             ((uint64_t)(((uint64_t)1)<<45))  /*!< Pin 45 selected */
+#define GPIO_SEL_46             ((uint64_t)(((uint64_t)1)<<46))  /*!< Pin 46 selected */
+#if CONFIG_IDF_TARGET_ESP32S3
+#define GPIO_SEL_47             ((uint64_t)(((uint64_t)1)<<47))  /*!< Pin 47 selected */
+#define GPIO_SEL_48             ((uint64_t)(((uint64_t)1)<<48))  /*!< Pin 48 selected */
+#endif
+#endif
+
 #define GPIO_PIN_REG_0          IO_MUX_GPIO0_REG
 #define GPIO_PIN_REG_1          IO_MUX_GPIO1_REG
 #define GPIO_PIN_REG_2          IO_MUX_GPIO2_REG
